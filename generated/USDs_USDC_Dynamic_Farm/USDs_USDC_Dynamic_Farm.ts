// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CooldownInitiated extends ethereum.Event {
  get params(): CooldownInitiated__Params {
    return new CooldownInitiated__Params(this);
  }
}

export class CooldownInitiated__Params {
  _event: CooldownInitiated;

  constructor(event: CooldownInitiated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get expiryDate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CooldownPeriodUpdated extends ethereum.Event {
  get params(): CooldownPeriodUpdated__Params {
    return new CooldownPeriodUpdated__Params(this);
  }
}

export class CooldownPeriodUpdated__Params {
  _event: CooldownPeriodUpdated;

  constructor(event: CooldownPeriodUpdated) {
    this._event = event;
  }

  get oldCooldownPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCooldownPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositPaused extends ethereum.Event {
  get params(): DepositPaused__Params {
    return new DepositPaused__Params(this);
  }
}

export class DepositPaused__Params {
  _event: DepositPaused;

  constructor(event: DepositPaused) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class DepositWithdrawn extends ethereum.Event {
  get params(): DepositWithdrawn__Params {
    return new DepositWithdrawn__Params(this);
  }
}

export class DepositWithdrawn__Params {
  _event: DepositWithdrawn;

  constructor(event: DepositWithdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalRewardsClaimed(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get locked(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EmergencyClaim extends ethereum.Event {
  get params(): EmergencyClaim__Params {
    return new EmergencyClaim__Params(this);
  }
}

export class EmergencyClaim__Params {
  _event: EmergencyClaim;

  constructor(event: EmergencyClaim) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FundsRecovered extends ethereum.Event {
  get params(): FundsRecovered__Params {
    return new FundsRecovered__Params(this);
  }
}

export class FundsRecovered__Params {
  _event: FundsRecovered;

  constructor(event: FundsRecovered) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolUnsubscribed extends ethereum.Event {
  get params(): PoolUnsubscribed__Params {
    return new PoolUnsubscribed__Params(this);
  }
}

export class PoolUnsubscribed__Params {
  _event: PoolUnsubscribed;

  constructor(event: PoolUnsubscribed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fundId(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalRewardsClaimed(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RewardRateUpdated extends ethereum.Event {
  get params(): RewardRateUpdated__Params {
    return new RewardRateUpdated__Params(this);
  }
}

export class RewardRateUpdated__Params {
  _event: RewardRateUpdated;

  constructor(event: RewardRateUpdated) {
    this._event = event;
  }

  get fundId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get oldRewardRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newRewardRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fundLiquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class USDs_USDC_Dynamic_Farm__depositsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class USDs_USDC_Dynamic_Farm__rewardFundsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class USDs_USDC_Dynamic_Farm__subscriptionsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class USDs_USDC_Dynamic_Farm extends ethereum.SmartContract {
  static bind(address: Address): USDs_USDC_Dynamic_Farm {
    return new USDs_USDC_Dynamic_Farm("USDs_USDC_Dynamic_Farm", address);
  }

  COMMON_FUND_ID(): i32 {
    let result = super.call("COMMON_FUND_ID", "COMMON_FUND_ID():(uint8)", []);

    return result[0].toI32();
  }

  try_COMMON_FUND_ID(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "COMMON_FUND_ID",
      "COMMON_FUND_ID():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  LOCKUP_FUND_ID(): i32 {
    let result = super.call("LOCKUP_FUND_ID", "LOCKUP_FUND_ID():(uint8)", []);

    return result[0].toI32();
  }

  try_LOCKUP_FUND_ID(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "LOCKUP_FUND_ID",
      "LOCKUP_FUND_ID():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  NFPM(): Address {
    let result = super.call("NFPM", "NFPM():(address)", []);

    return result[0].toAddress();
  }

  try_NFPM(): ethereum.CallResult<Address> {
    let result = super.tryCall("NFPM", "NFPM():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PREC(): BigInt {
    let result = super.call("PREC", "PREC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PREC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PREC", "PREC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SPA(): Address {
    let result = super.call("SPA", "SPA():(address)", []);

    return result[0].toAddress();
  }

  try_SPA(): ethereum.CallResult<Address> {
    let result = super.tryCall("SPA", "SPA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SPAUSDsPool(): Address {
    let result = super.call("SPAUSDsPool", "SPAUSDsPool():(address)", []);

    return result[0].toAddress();
  }

  try_SPAUSDsPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("SPAUSDsPool", "SPAUSDsPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UNIV3_FACTORY(): Address {
    let result = super.call("UNIV3_FACTORY", "UNIV3_FACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_UNIV3_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNIV3_FACTORY",
      "UNIV3_FACTORY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeRewards(account: Address, depositId: BigInt): BigInt {
    let result = super.call(
      "computeRewards",
      "computeRewards(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(depositId)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeRewards(
    account: Address,
    depositId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeRewards",
      "computeRewards(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(depositId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cooldownPeriod(): BigInt {
    let result = super.call("cooldownPeriod", "cooldownPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cooldownPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cooldownPeriod",
      "cooldownPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposits(
    param0: Address,
    param1: BigInt
  ): USDs_USDC_Dynamic_Farm__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(address,uint256):(bool,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new USDs_USDC_Dynamic_Farm__depositsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_deposits(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<USDs_USDC_Dynamic_Farm__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(address,uint256):(bool,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new USDs_USDC_Dynamic_Farm__depositsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  emergencyReturn(): Address {
    let result = super.call(
      "emergencyReturn",
      "emergencyReturn():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_emergencyReturn(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "emergencyReturn",
      "emergencyReturn():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumDeposits(account: Address): BigInt {
    let result = super.call(
      "getNumDeposits",
      "getNumDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getNumDeposits(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumDeposits",
      "getNumDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumSubscriptions(tokenId: BigInt): BigInt {
    let result = super.call(
      "getNumSubscriptions",
      "getNumSubscriptions(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getNumSubscriptions(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumSubscriptions",
      "getNumSubscriptions(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inEmergency(): boolean {
    let result = super.call("inEmergency", "inEmergency():(bool)", []);

    return result[0].toBoolean();
  }

  try_inEmergency(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inEmergency", "inEmergency():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastFundUpdateTime(): BigInt {
    let result = super.call(
      "lastFundUpdateTime",
      "lastFundUpdateTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFundUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFundUpdateTime",
      "lastFundUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardFunds(param0: BigInt): USDs_USDC_Dynamic_Farm__rewardFundsResult {
    let result = super.call(
      "rewardFunds",
      "rewardFunds(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new USDs_USDC_Dynamic_Farm__rewardFundsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_rewardFunds(
    param0: BigInt
  ): ethereum.CallResult<USDs_USDC_Dynamic_Farm__rewardFundsResult> {
    let result = super.tryCall(
      "rewardFunds",
      "rewardFunds(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new USDs_USDC_Dynamic_Farm__rewardFundsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  subscriptions(
    param0: BigInt,
    param1: BigInt
  ): USDs_USDC_Dynamic_Farm__subscriptionsResult {
    let result = super.call(
      "subscriptions",
      "subscriptions(uint256,uint256):(uint8,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new USDs_USDC_Dynamic_Farm__subscriptionsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_subscriptions(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<USDs_USDC_Dynamic_Farm__subscriptionsResult> {
    let result = super.tryCall(
      "subscriptions",
      "subscriptions(uint256,uint256):(uint8,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new USDs_USDC_Dynamic_Farm__subscriptionsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tickLowerAllowed(): i32 {
    let result = super.call(
      "tickLowerAllowed",
      "tickLowerAllowed():(int24)",
      []
    );

    return result[0].toI32();
  }

  try_tickLowerAllowed(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "tickLowerAllowed",
      "tickLowerAllowed():(int24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tickUpperAllowed(): i32 {
    let result = super.call(
      "tickUpperAllowed",
      "tickUpperAllowed():(int24)",
      []
    );

    return result[0].toI32();
  }

  try_tickUpperAllowed(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "tickUpperAllowed",
      "tickUpperAllowed():(int24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SPA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _USDs(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _emergencyReturn(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tickLowerAllowed(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _tickUpperAllowed(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _feeTier(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _nolockupRewardsPerSec(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _lockuprewardsPerSec(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewards1Call extends ethereum.Call {
  get inputs(): ClaimRewards1Call__Inputs {
    return new ClaimRewards1Call__Inputs(this);
  }

  get outputs(): ClaimRewards1Call__Outputs {
    return new ClaimRewards1Call__Outputs(this);
  }
}

export class ClaimRewards1Call__Inputs {
  _call: ClaimRewards1Call;

  constructor(call: ClaimRewards1Call) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewards1Call__Outputs {
  _call: ClaimRewards1Call;

  constructor(call: ClaimRewards1Call) {
    this._call = call;
  }
}

export class DeclareEmergencyCall extends ethereum.Call {
  get inputs(): DeclareEmergencyCall__Inputs {
    return new DeclareEmergencyCall__Inputs(this);
  }

  get outputs(): DeclareEmergencyCall__Outputs {
    return new DeclareEmergencyCall__Outputs(this);
  }
}

export class DeclareEmergencyCall__Inputs {
  _call: DeclareEmergencyCall;

  constructor(call: DeclareEmergencyCall) {
    this._call = call;
  }
}

export class DeclareEmergencyCall__Outputs {
  _call: DeclareEmergencyCall;

  constructor(call: DeclareEmergencyCall) {
    this._call = call;
  }
}

export class InitiateCooldownCall extends ethereum.Call {
  get inputs(): InitiateCooldownCall__Inputs {
    return new InitiateCooldownCall__Inputs(this);
  }

  get outputs(): InitiateCooldownCall__Outputs {
    return new InitiateCooldownCall__Outputs(this);
  }
}

export class InitiateCooldownCall__Inputs {
  _call: InitiateCooldownCall;

  constructor(call: InitiateCooldownCall) {
    this._call = call;
  }

  get depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitiateCooldownCall__Outputs {
  _call: InitiateCooldownCall;

  constructor(call: InitiateCooldownCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardsPerSecCall extends ethereum.Call {
  get inputs(): SetRewardsPerSecCall__Inputs {
    return new SetRewardsPerSecCall__Inputs(this);
  }

  get outputs(): SetRewardsPerSecCall__Outputs {
    return new SetRewardsPerSecCall__Outputs(this);
  }
}

export class SetRewardsPerSecCall__Inputs {
  _call: SetRewardsPerSecCall;

  constructor(call: SetRewardsPerSecCall) {
    this._call = call;
  }

  get fundId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newRewardRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardsPerSecCall__Outputs {
  _call: SetRewardsPerSecCall;

  constructor(call: SetRewardsPerSecCall) {
    this._call = call;
  }
}

export class ToggleDepositPauseCall extends ethereum.Call {
  get inputs(): ToggleDepositPauseCall__Inputs {
    return new ToggleDepositPauseCall__Inputs(this);
  }

  get outputs(): ToggleDepositPauseCall__Outputs {
    return new ToggleDepositPauseCall__Outputs(this);
  }
}

export class ToggleDepositPauseCall__Inputs {
  _call: ToggleDepositPauseCall;

  constructor(call: ToggleDepositPauseCall) {
    this._call = call;
  }
}

export class ToggleDepositPauseCall__Outputs {
  _call: ToggleDepositPauseCall;

  constructor(call: ToggleDepositPauseCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCooldownPeriodCall extends ethereum.Call {
  get inputs(): UpdateCooldownPeriodCall__Inputs {
    return new UpdateCooldownPeriodCall__Inputs(this);
  }

  get outputs(): UpdateCooldownPeriodCall__Outputs {
    return new UpdateCooldownPeriodCall__Outputs(this);
  }
}

export class UpdateCooldownPeriodCall__Inputs {
  _call: UpdateCooldownPeriodCall;

  constructor(call: UpdateCooldownPeriodCall) {
    this._call = call;
  }

  get newCooldownPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCooldownPeriodCall__Outputs {
  _call: UpdateCooldownPeriodCall;

  constructor(call: UpdateCooldownPeriodCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
